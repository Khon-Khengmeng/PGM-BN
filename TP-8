import numpy as np
import matplotlib.pyplot as plt
from hmmlearn.hmm import GaussianHMM

np.random.seed(42)

# Hidden states: Bull (0) and Bear (1)
states = ["Bull", "Bear"]
n_samples = 1000

# Transition probabilities
trans_mat = np.array([[0.9, 0.1],  # Bull -> Bull, Bear
                      [0.2, 0.8]]) # Bear -> Bull, Bear

# Means and variances for each state
means = [1.0, -1.0]  # Bull increases, Bear decreases
stds = [0.5, 1.0]

# Generate hidden states
hidden_states = [0]
for _ in range(n_samples - 1):
    current_state = hidden_states[-1]
    next_state = np.random.choice([0, 1], p=trans_mat[current_state])
    hidden_states.append(next_state)

# Generate observations based on hidden states
returns = [np.random.normal(means[state], stds[state]) for state in hidden_states]
prices = 100 + np.cumsum(returns)  # Simulated stock prices


# Reshape returns to 2D array (n_samples, n_features)
X = np.array(returns).reshape(-1, 1)

# Define and train HMM
model = GaussianHMM(n_components=2, covariance_type="diag", n_iter=1000)
model.fit(X)

# Predict the hidden states
predicted_states = model.predict(X)

plt.figure(figsize=(15, 6))

plt.plot(prices, label="Simulated Stock Price", color='black')
plt.title("Simulated Stock Prices and Hidden States")

for state in range(model.n_components):
    idx = predicted_states == state
    plt.plot(np.where(idx)[0], np.array(prices)[idx], ".", label=f"Predicted State {state}")

plt.legend()
plt.xlabel("Time")
plt.ylabel("Price")
plt.grid(True)
plt.show()

